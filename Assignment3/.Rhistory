y
attributes(y)
dim(y)
x+y
y<- 2.1:3.1
y
x+y
x<-4
class(x)
x<-c(4, TRUE)
class(x)
x<-c(1,3,5)
y<-c(3,2,10)
rbind(x,y)
x<-list(2, "a", "b", TRUE)
x[[1]]
x<-1:4
y<2
y<-2
x+y
class(x+y)
class(x[[1]])
x<-c(3,5,1,10,12,6)
x[x<6] <- 0
x
?seq_len
??seq_len
x<-matrix(1:6, 2, 3)
seq_len(nrow(x))
seq_len(x
)
seq_len(x)
seq_len(ncol(x))
x
x[,1]
seq_along(x[,])
seq_along(x[,1])
seq_along(x[1,])
formals(lm)
formas(sd)
formals(sd)
mydata <- rnorm(100)
sd(mydata)
formals(paste)
?paste
paste("a", "b", sep="-|-", "***")
paste("a", "b", sep="-|-", collapse="***")
paste("a", "b", sep="-|-", collapse="*")
search()
lm <- function(x) { x*x*x }
lm
lm(2)
make.power <- function(n) { pow <- function(x) { x ^ n } pow }
make.power <- function(n)
{
pow <- function(x)
{ x ^ n }
pow
}
make.power(3)
make.power(3)
cube <- make.power(3)
cube(3)
cube(4)
environment(cube)
ls(environment(cube))
get("n", environment(cube))
formals(optim)
formals(nlm)
formals(optimize)
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
optim(c(-1.2,1), fr)
optim(c(-1.2,1), fr)$par
optim(c(-1.2,1), fr)$minimum
?runif
runif(1:4)
x<1:4
x<-1:4
lapply(x, runif)
formals(lapply)
lapply(x, runif, min=0, max=10)
sapply(x, mean)
x<-list(a=1:4, b=rnorm(10))
x
sapply(x, mean)
lapply(x, mean)
attribute(sapply(x, mean))
attributes(sapply(x, mean))
class(sapply(x, mean))
x<-matrix(1:6, 2, 3)
apply(x, 2, mean)
x
apply(x, 1, mean)
a<-array(c(1, 3, 5), c(2, 2, 10))
apply(a, c(1, 2), mean)
a
?array
dim(a)
?apply
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
colSums(a, dims = 3)
colSums(a, dims = 2)
formals(runif)
?gl
split
?split
split(1:10, 1:2)
?gl
rnorm(5)
rnorm(1:5)
options(error=recover)
read.csv("junk")
cube <- function(x, n) {
x^3
}
cube(3)
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
class(x)
x<-0
?if
sas
library(datasets)
data(iris)
x<-1
if(x > 0 && x < 2)
print(x)
?iris
iris
iris[iris$Species == "virginica"]
optionss(error=NULL)
options(error=NULL)
iris[iris$Species == "virginica"]
iris[iris$Species = "virginica"]
iris[iris$Species]
iris
iris[iris$Species == virginica,]
iris[iris$Species == "virginica"",]
iris[iris$Species == "virginica",]
iris[iris$Species == "virginica",]
iris[iris$Species == "virginica",1]
mean(iris[iris$Species == "virginica",1])
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z<-10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
debug(ls)
ls
debug(lm)
lm
undebug(ls)
debug(plot)
plot
undebug(ls)
undebug(plot)
undebug(ls)
ls
library(datasets)
data(mtcars)
?mtcars
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 0
}
x
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
mtcars[,1]
mtcars[,2]
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
plot(x,)
plot(x,y)
x<-rnorm(100)
hist(x)
y <- x + rnorm(100)
par(las = 1)
plot(x,y)
par(las = 2)
plot(x,y)
par(las = 1)
plot(x,y)
par(las = 2)
plot(x,y)
par(bg = blue)
par(bg = "blue")
plot(x,y)
par(bg = "transparent")
plot(x,y)
par("lty")
par("lwd")
par("col")
par("pch")
par("bg")
par("mar")
par("oma")
par("mfrow")
par("mfcol")
?lines
lines(stats::lowess(cars))
?devices
?Devices
pdf(file="testRplot.pdf")
hist(x)
dev.off()
par(las = 2)
hist(x)
pdf(file="testRplot.pdf")
par(las = 2)
hist(x)
dev.off()
y<-x + rnorm(100, sd=0.5)
f <- gl(2, 50, labels=c("group 1", "group 2"))
xyplot( y ~ x | f)
f <- gl(2, 50, labels=c("Group 1", "Group 2"))
xyplot( y ~ x | f)
?xyplot
f
package ? lattice
library("lattice")
package ? lattice
x<- rnorm(100)
y<-x + rnorm(100, sd=0.5)
f <- gl(2, 50, labels=c("Group 1", "Group 2"))
xyplot( y ~ x | f)
source("submitscript.R")
setwd("C:/Users/dizi/Coursera/Intro-to-Data-Analysis/Assignment3/ProgAssignment3-data")
source("../submitscript.R")
submit()
submit()
submit()
setwd("C:/Users/dizi/Coursera/Intro-to-Data-Analysis/Assignment3")
submit()
best <- function(state, outcome) {
## Read outcome data
all_outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#hospital <- read.csv("hospital-data.csv", colClasses = "character")
deathrate_outcomes <- c("heart attack", "heart failure", "pneumonia")
all_states <- unique(all_outcomes[,"State"], incomparables = FALSE)
## Check that state and outcome are valid
error <-is.na(match(outcome,deathrate_outcomes))
if(error == TRUE)
stop("invalid outcome")
error <-is.na(match(state,all_states))
if(error == TRUE)
stop("invalid state")
## Return hospital name in that state with lowest 30-day death
## rate
# Set death rate column
if(outcome == "heart attack")
deathrate_column <- 11
else if(outcome == "heart failure")
deathrate_column <- 17
else if(outcome == "pneumonia")
deathrate_column <- 23
# Set numeric
all_outcomes[,deathrate_column] <- as.numeric(all_outcomes[,deathrate_column])
# Filter outcomes by state
filter <-
all_outcomes[all_outcomes[,"State"] == state, c(2,deathrate_column)]
# Get min value in death rate column
min_val <- min(filter[,2], na.rm = TRUE)
# Get all hospital names with min value
hospital_names <-
sort(filter[filter[,2] == min_val,1])
hospital_names[1]
}
source("best.R")
best("TX", "heart attack")
options(warn=-1)
best("TX", "heart attack")
submit()
submit()
submit()
source("rankhospital.R")
best("TX", "heart attack")
source("rankhospital.R")
best("TX", "heart attack")
all_outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
deathrate_outcomes <- c("heart attack", "heart failure", "pneumonia")
all_states <- unique(all_outcomes[,"State"], incomparables = FALSE)
outcome <- "heart attack"
if(outcome == "heart attack")
deathrate_column <- 11
else if(outcome == "heart failure")
deathrate_column <- 17
else if(outcome == "pneumonia")
deathrate_column <- 23
deathrate_column <- 11
all_outcomes[,deathrate_column] <- as.numeric(all_outcomes[,deathrate_column])
filter <-
all_outcomes[all_outcomes[,"State"] == state, c(2,deathrate_column)]
state <- "TX"
filter <-
all_outcomes[all_outcomes[,"State"] == state, c(2,deathrate_column)]
sort(filter, partial = c(2, 1))
filter
sort(filter, partial = c(2, 1))
sort(c(filter[,2], filter[,1]), partial = c(2, 1))
sort(c(filter[,2], filter[,1]))
filter[ order(filter[,2], filter[,1]), ]
texas <-
sort(c(filter[,2], filter[,1]))
filter[ order(filter[,2], filter[,1]), ]
texas <-
filter[ order(filter[,2], filter[,1]), ]
head(texas)
state
all_outcomes[,deathrate_column] <- as.numeric(all_outcomes[,deathrate_column])
texas <-
filter[ order(filter[,2], filter[,1]), ]
head(texas)
min(filter[,2], na.rm = TRUE)
deathrate_column <- 17
all_outcomes[,deathrate_column] <- as.numeric(all_outcomes[,deathrate_column])
filter <-
all_outcomes[all_outcomes[,"State"] == state, c(2,deathrate_column)]
min(filter[,2], na.rm = TRUE)
texas <-
filter[ order(filter[,2], filter[,1]), ]
head(texas)
texas[5]
texas[5,1]
rcol(ordered_filter)
ncol(ordered_filter)
nrows(ordered_filter)
nrow(ordered_filter)
length(ordered_filter)
ordered_filter <-
filter[order(filter[,2], filter[,1]), ]
length(ordered_filter)
nrow(ordered_filter)
source("rankhospital.R")
rankhospital.R("TX", "heart failure", 4)
source("rankhospital.R")
source("rankhospital.R")
rankhospital.R("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
all_outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#hospital <- read.csv("hospital-data.csv", colClasses = "character")
deathrate_outcomes <- c("heart attack", "heart failure", "pneumonia")
all_states <- unique(all_outcomes[,"State"], incomparables = FALSE)
## Check that state and outcome are valid
error <-is.na(match(outcome,deathrate_outcomes))
if(error == TRUE)
stop("invalid outcome")
error <-is.na(match(state,all_states))
if(error == TRUE)
stop("invalid state")
## Return hospital name in that state with lowest 30-day death
## rate
# Set death rate column
if(outcome == "heart attack")
deathrate_column <- 11
else if(outcome == "heart failure")
deathrate_column <- 17
else if(outcome == "pneumonia")
deathrate_column <- 23
# Set numeric
all_outcomes[,deathrate_column] <- as.numeric(all_outcomes[,deathrate_column])
# Filter outcomes by state
filter <-
all_outcomes[all_outcomes[,"State"] == state, c(2,deathrate_column)]
# Get all hospital names with min value
ordered_filter <-
filter[order(filter[,2], filter[,1]), ]
if(num == "best")
ordered_filter[1,1]
else if(num == "worst")
ordered_filter[nrow(ordered_filter),1]
else
ordered_filter[as.numeric(num), 1]
}
source("rankhospital.R")
rankhospital.R("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", "worst")
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4000)
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4000)
rankhospital("MD", "heart attack", 4)
source("rankhospital.R")
rankhospital("MD", "heart attack", 4)
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MD", "heart attack", 4)
submit()
5
submit()
submit()
submit()
rankall("hert attack")
source("rankall.R")
rankall("hert attack")
all_outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
all_states <- sort(unique(all_outcomes[,"State"], incomparables = FALSE))
all_states
rstudio::viewData(texas)
test <- list(foo = c(1,2), bar = c("AK", "AL"))
test
test <- data.frame(foo = c(1,2), bar = c("AK", "AL"))
test
test <- data.frame(hospital = c("H1", "H2"), state = c("AK", "AL"))
test
rankall <- function(outcome, num = "best") {
test <- data.frame(hospital = c("H1", "H2"), state = c("AK", "AL"))
test
}
rankall("a")
head(rankall("a"), 1)
source("rankall.R")
rankall("hert attack")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
length(all_states)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 1022)
head(rankall("heart failure", 4000), 10)
rankall <- function(outcome, num = "best") {
test <- data.frame(hospital = c("H1", "H2"), state = c("AK", "AL"))
test
}
head(rankall("a"), 1)
test <- data.frame(hospital = c("H1", "H2"), state = c("AK", "AL"))
dput(test)
test <- data.frame(hospital = c("H1", "H2"), state = c("AK", "AL"))
row.names(test) <- state
state <- c("AK", "AL")
test <- data.frame(hospital = c("H1", "H2"), state)
row.names(test) <- state
test
source("rankall.R")
head(rankall("heart attack", 20), 10)
rankall("hert attack")
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
head(rankall("heart failure", 4000), 10)
submit()
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
submit()
9
submit()
submit()
